#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// layers
#define L_BASE 0
#define L_MAC 1
#define L_SYM_NUM 2
#define L_NUMPAD 3
#define L_NAV 4

// not implemented
#define MOUSE_LCLK &none
#define MOUSE_MCLK &none
#define MOUSE_RCLK &none
#define M_UP &none
#define M_DOWN &none
#define M_LEFT &none
#define M_RIGHT &none
#define M_WHEEL_L &none
#define M_WHEEL_R &none
#define M_WHEEL_U &none
#define M_WHEEL_D &none

#define W_CUT &kp LC(X)
#define W_COPY &kp LC(C)
#define W_PASTE &kp LC(V)
/ {
	keymap {
		compatible = "zmk,keymap";
		layer_0 {  // L_BASE
			bindings = <
				&bootloader
				&kp ESC             &kp F1       &kp F2       &kp F3       &kp F4       &kp F5  &to L_MAC       &kp F12    &kp F6       &kp F7       &kp F8       &kp F9       &kp F10         &kp F11
				&kp TAB             &kp Q        &kp W        &kp E        &kp R        &kp T   &kp MINUS       &kp BKSP   &kp Y        &kp U        &kp I        &kp O        &kp P           &kp BSLH
				&kp CAPS            &kp A        &kp S        &kp D        &kp F        &kp G                              &kp H        &kp J        &kp K        &kp L        &kp SEMICOLON   &kp SINGLE_QUOTE
				&mt LSHIFT LPAR     &kp Z        &kp X        &kp C        &kp V        &kp B   &kp EQUAL       &kp DEL    &kp N        &kp M        &kp CMMA     &kp DOT      &kp FSLH        &mt RSHIFT RPAR
				&kp LCTL            &kp LMETA    &none        &none        &kp LALT                                                     &kp RALT     &none        &kp K_APP    &kp INS         &kp RCTL
				                                                                 &kp DEL        &kp HOME        &kp END    &kp INS
				                                            &lt L_SYM_NUM SPC    &lt L_NAV TAB  &kp PGUP        &kp PGDN   &lt L_SYM_NUM SPC    &lt L_NAV RET
				                                                                                &kp LGUI        &kp GRAVE
			>;
		};

		layer_1 {  // L_MAC
			bindings = <
				&bootloader
				&trans  &trans  &trans  &trans  &trans  &trans  &to L_BASE   &trans  &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &kp B   &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &trans  &trans  &trans  &trans                                       &trans  &trans  &trans  &trans  &trans
				                                       &trans  &trans        &trans  &trans
				                               &trans  &trans  &trans        &trans  &trans  &trans
				                                               &trans        &trans
			>;
		};

		layer_2 { // L_SYM_NUM 
			bindings = <
				&bootloader
				&trans   &trans       &trans       &trans       &trans     &trans    &trans     &trans &trans &to L_NUMPAD &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp KP_SUBTRACT  &trans
				&trans   &none        &none        &kp LBKT     &kp RBKT   &kp PIPE  &trans     &trans &none  &kp NUMBER_7 &kp NUMBER_8   &kp NUMBER_9     &kp KP_PLUS      &trans
				&trans   &kp APOS     &kp DQT      &kp LPAR     &kp RPAR   &kp GRAVE                   &none  &kp NUMBER_4 &kp NUMBER_5   &kp NUMBER_6     &kp RETURN2      &trans
				&trans   &none        &none        &kp LT       &kp GT     &kp TILDE &trans     &trans &none  &kp NUMBER_1 &kp NUMBER_2   &kp NUMBER_3     &kp RETURN2      &trans
				&trans   &trans       &trans       &trans       &trans                                        &trans       &kp NUMBER_0   &kp KP_DOT       &trans           &trans
				                                                               &trans &trans   &trans  &trans
				                                                       &trans  &trans &trans   &trans  &trans &trans
				                                                                      &trans   &trans
			>;
		};
		layer_3 {  // L_NUMPAD
			bindings = <
				&bootloader
				&trans   &trans       &trans       &trans       &trans     &trans    &trans     &trans &kp KP_NUMLOCK &to L_SYM_NUM &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp KP_SUBTRACT  &trans
				&trans   &none        &none        &kp LBKT     &kp RBKT   &kp PIPE  &trans     &trans &to L_BASE     &kp KP_N7     &kp KP_N8      &kp KP_N9        &kp KP_PLUS      &trans
				&trans   &trans       &kp DQT      &kp LPAR     &kp RPAR   &kp GRAVE                   &none          &kp KP_N4     &kp KP_N5      &kp KP_N6        &kp RETURN2      &trans
				&trans   &none        &none        &kp LT       &kp GT     &kp TILDE &trans     &trans &none          &kp KP_N1     &kp KP_N2      &kp KP_N3        &kp RETURN2      &trans
				&trans   &trans       &trans       &trans       &trans                                                &trans        &kp KP_N0      &kp KP_DOT       &trans           &trans
				                                                               &trans &trans   &trans  &trans
				                                                       &trans  &trans &trans   &trans  &trans &trans
				                                                                      &trans   &trans
			>;
		};
		layer_4 { // L_NAV
			bindings = <
				&bootloader
				&trans &trans     &kp C_BRI_DN  &kp C_BRI_UP  &none          &bt BT_PRV &bt BT_NXT      &trans  &trans        &kp C_VOL_DN   &kp C_VOL_UP   &kp C_MUTE      &trans       &trans
				&trans &none      M_WHEEL_L     M_UP          M_WHEEL_R      &none      &trans          &trans  &kp PAGE_UP   &kp HOME       &kp UP_ARROW   &kp END         &none        &kp C_PREVIOUS
				&trans M_WHEEL_U  M_LEFT        M_DOWN        M_RIGHT        &none                              &kp PAGE_DOWN &kp LEFT_ARROW &kp DOWN_ARROW &kp RIGHT_ARROW &none        &kp C_PLAY_PAUSE
				&trans M_WHEEL_D  W_CUT         W_COPY        W_PASTE        &none      &trans          &trans  &none         MOUSE_LCLK     MOUSE_MCLK     MOUSE_RCLK      &none        &kp C_NEXT
				&trans &trans     &trans        &trans        &trans                                                          &trans         &trans         &trans          &trans       &trans
				                                                                &trans &trans           &trans  &trans
				                                                       &trans   &trans &trans           &trans  &trans   &trans
				                                                                       &trans           &trans
			>;
		};

		/* transparent starter
		layer_1 {  // L_XYZ
			bindings = <
				&bootloader
				&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
				&trans  &trans  &trans  &trans  &trans                                       &trans  &trans  &trans  &trans  &trans
				                                        &trans  &trans       &trans  &trans
				                                &trans  &trans  &trans       &trans  &trans  &trans
				                                                &trans       &trans
			>;
		};
		*/

		/* blank starter
		layer_1 {  // L_XYZ
			bindings = <
				&bootloader
				&none  &none  &none  &none  &none  &none  &none       &none  &none  &none  &none  &none  &none  &none
				&none  &none  &none  &none  &none  &none  &none       &none  &none  &none  &none  &none  &none  &none
				&none  &none  &none  &none  &none  &none                     &none  &none  &none  &none  &none  &none
				&none  &none  &none  &none  &none  &none  &none       &none  &none  &none  &none  &none  &none  &none
				&none  &none  &none  &none  &none                                   &none  &none  &none  &none  &none
				                                   &none  &none       &none  &none
				                            &none  &none  &none       &none  &none  &none
				                                          &none       &none
			>;
		};
		*/
	};
};
